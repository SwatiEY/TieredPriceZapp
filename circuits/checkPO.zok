from "ecc/babyjubjubParams" import main as curveParams
from "ecc/edwardsScalarMult" import main as scalarMult
from "ecc/edwardsCompress" import main as edwardsCompress
from "utils/pack/bool/pack256.zok" import main as bool_256_to_field
from "utils/pack/bool/nonStrictUnpack256.zok" import main as field_to_bool_256
from "hashes/poseidon/poseidon.zok" import main as poseidon
from "./common/merkle-tree/sparse-merkle-tree/checkproof.zok" import main as checkproof
from "./common/merkle-tree/sparse-merkle-tree/checkproof.zok" import checkUpdatedPath as checkUpdatedPath
from "./common/merkle-tree/mimc/altbn254/verify-membership/height32.zok" import main as checkRoot

struct PriceTierItem {
        field minQuantity
field price
      }

struct PurchaseOrder {
        field sku
field quantity
field subTotal
      }

def main(\
	private PurchaseOrder[9] order,\
	private field purchaseOrderId,\
	private field assetPriceTiers_sku_oldCommitment_owner_secretKey,\
	public field[9] assetPriceTiers_sku_oldCommitment_nullifier,\
	private  PriceTierItem[9][9] assetPriceTiers_sku_oldCommitment_value,\
	private field[9] assetPriceTiers_sku_oldCommitment_salt,\
	public field commitmentRoot,\
	private field[9] assetPriceTiers_sku_oldCommitment_membershipWitness_index,\
	private field[9][32] assetPriceTiers_sku_oldCommitment_membershipWitness_siblingPath,\
	private field purchaseOrder_purchaseOrderId_oldCommitment_owner_secretKey,\
	public field purchaseOrder_purchaseOrderId_oldCommitment_nullifier,\
	private  PurchaseOrder[9] purchaseOrder_purchaseOrderId_oldCommitment_value,\
	private field purchaseOrder_purchaseOrderId_oldCommitment_salt,\
	private field purchaseOrder_purchaseOrderId_oldCommitment_membershipWitness_index,\
	private field[32] purchaseOrder_purchaseOrderId_oldCommitment_membershipWitness_siblingPath,\
	private field purchaseOrder_purchaseOrderId_newCommitment_owner_publicKey,\
	private field purchaseOrder_purchaseOrderId_newCommitment_salt,\
	public field purchaseOrder_purchaseOrderId_newCommitment_commitment\
) -> (bool):

        
        // We need to hard-code the mappingId's of mappings into the circuit:
        field assetPriceTiers_mappingId = 26


        PriceTierItem[9][9] assetPriceTiers_sku = assetPriceTiers_sku_oldCommitment_value


        // We need to hard-code the mappingId's of mappings into the circuit:
        field purchaseOrder_mappingId = 50


        PurchaseOrder[9] purchaseOrder_purchaseOrderId = purchaseOrder_purchaseOrderId_oldCommitment_value

        // assetPriceTiers_sku_index_oldCommitment - PoKoSK:
        // The correctness of this secret key will be constrained within the oldCommitment existence check.

        field[2] assetPriceTiers_sku_oldCommitment_owner_publicKey_point = scalarMult(field_to_bool_256(assetPriceTiers_sku_oldCommitment_owner_secretKey), [curveParams().Gu, curveParams().Gv], curveParams())

        bool assetPriceTiers_sku_oldCommitment_owner_publicKey_sign = edwardsCompress(assetPriceTiers_sku_oldCommitment_owner_publicKey_point)[0]

        bool[254] assetPriceTiers_sku_oldCommitment_yBits = field_to_bool_256(assetPriceTiers_sku_oldCommitment_owner_publicKey_point[1])[2..256]
        assetPriceTiers_sku_oldCommitment_yBits[0] = assetPriceTiers_sku_oldCommitment_owner_publicKey_sign

        field assetPriceTiers_sku_oldCommitment_owner_publicKey = bool_256_to_field([false, false, ...assetPriceTiers_sku_oldCommitment_yBits])

for u32 index in 0..9 do

		field sku = order[index].sku

    field assetPriceTiers_sku_stateVarId_field = poseidon([assetPriceTiers_mappingId, sku])
    

        // Nullify assetPriceTiers_sku_index:

        field assetPriceTiers_sku_oldCommitment_nullifier_check_field =  if assetPriceTiers_sku_oldCommitment_salt[index] != 0 then poseidon([\
          assetPriceTiers_sku_stateVarId_field,\
          assetPriceTiers_sku_oldCommitment_owner_secretKey,\
          assetPriceTiers_sku_oldCommitment_salt[index]\
        ]) else assetPriceTiers_sku_oldCommitment_nullifier[index] fi

        assert(\
        field_to_bool_256(assetPriceTiers_sku_oldCommitment_nullifier[index])[8..256] == field_to_bool_256(assetPriceTiers_sku_oldCommitment_nullifier_check_field)[8..256]\
        )
        // assetPriceTiers_sku_index_oldCommitment_nullifier : non-existence check
        
        // prepare secret state 'assetPriceTiers_sku_index' for commitment

          field assetPriceTiers_sku_oldCommitment_value_field = poseidon([assetPriceTiers_sku_oldCommitment_value[index][0].minQuantity, assetPriceTiers_sku_oldCommitment_value[index][0].price])

          
         for u32 i in 1..9 do
        // Create the innerValue using Poseidon hash
        field innerValue = if (assetPriceTiers_sku_oldCommitment_value[index][i].minQuantity != 0 && assetPriceTiers_sku_oldCommitment_value[index][i].price != 0) then poseidon([assetPriceTiers_sku_oldCommitment_value[index][i].minQuantity, assetPriceTiers_sku_oldCommitment_value[index][i].price]) else 0 fi

        assetPriceTiers_sku_oldCommitment_value_field = if  innerValue != 0 then poseidon([assetPriceTiers_sku_oldCommitment_value_field, innerValue]) else assetPriceTiers_sku_oldCommitment_value_field fi
        endfor
          
        // assetPriceTiers_sku_index_oldCommitment_commitment: preimage check


        field assetPriceTiers_sku_oldCommitment_commitment_field =  poseidon([\
          assetPriceTiers_sku_stateVarId_field,\
          assetPriceTiers_sku_oldCommitment_value_field,\
          assetPriceTiers_sku_oldCommitment_owner_publicKey,\
          assetPriceTiers_sku_oldCommitment_salt [index]       ]) 


        // assetPriceTiers_sku_index_oldCommitment_commitment: existence check


        field assetPriceTiers_sku_commitmentRoot_check = if assetPriceTiers_sku_oldCommitment_salt[index] != 0 then checkRoot(\
          assetPriceTiers_sku_oldCommitment_membershipWitness_siblingPath[index],\
          assetPriceTiers_sku_oldCommitment_commitment_field,\
          assetPriceTiers_sku_oldCommitment_membershipWitness_index[index]\
        ) else commitmentRoot fi


        assert(\
          field_to_bool_256(commitmentRoot)[8..256] == field_to_bool_256(assetPriceTiers_sku_commitmentRoot_check)[8..256]\
        )


purchaseOrder_purchaseOrderId[index] = order[index]
            endfor


        field purchaseOrder_purchaseOrderId_stateVarId_field = poseidon([purchaseOrder_mappingId, purchaseOrderId])


        // purchaseOrder_purchaseOrderId_index_oldCommitment - PoKoSK:
        // The correctness of this secret key will be constrained within the oldCommitment existence check.

        field[2] purchaseOrder_purchaseOrderId_oldCommitment_owner_publicKey_point = scalarMult(field_to_bool_256(purchaseOrder_purchaseOrderId_oldCommitment_owner_secretKey), [curveParams().Gu, curveParams().Gv], curveParams())

        bool purchaseOrder_purchaseOrderId_oldCommitment_owner_publicKey_sign = edwardsCompress(purchaseOrder_purchaseOrderId_oldCommitment_owner_publicKey_point)[0]

        bool[254] purchaseOrder_purchaseOrderId_oldCommitment_yBits = field_to_bool_256(purchaseOrder_purchaseOrderId_oldCommitment_owner_publicKey_point[1])[2..256]
        purchaseOrder_purchaseOrderId_oldCommitment_yBits[0] = purchaseOrder_purchaseOrderId_oldCommitment_owner_publicKey_sign

        field purchaseOrder_purchaseOrderId_oldCommitment_owner_publicKey = bool_256_to_field([false, false, ...purchaseOrder_purchaseOrderId_oldCommitment_yBits])


        // Nullify purchaseOrder_purchaseOrderId_index:

        field purchaseOrder_purchaseOrderId_oldCommitment_nullifier_check_field = poseidon([\
          purchaseOrder_purchaseOrderId_stateVarId_field,\
          purchaseOrder_purchaseOrderId_oldCommitment_owner_secretKey,\
          purchaseOrder_purchaseOrderId_oldCommitment_salt\
        ])

        assert(\
        field_to_bool_256(purchaseOrder_purchaseOrderId_oldCommitment_nullifier)[8..256] == field_to_bool_256(purchaseOrder_purchaseOrderId_oldCommitment_nullifier_check_field)[8..256]\
        )
        // purchaseOrder_purchaseOrderId_index_oldCommitment_nullifier : non-existence check
        
        



        // prepare secret state 'purchaseOrder_purchaseOrderId_index' for commitment

          field purchaseOrder_purchaseOrderId_oldCommitment_value_field = poseidon([purchaseOrder_purchaseOrderId_oldCommitment_value[0].sku, purchaseOrder_purchaseOrderId_oldCommitment_value[0].quantity, purchaseOrder_purchaseOrderId_oldCommitment_value[0].subTotal])

          for u32 i in 1..9 do
        // Create the innerValue using Poseidon hash
        field innerValue = if (purchaseOrder_purchaseOrderId_oldCommitment_value[i].sku != 0 && purchaseOrder_purchaseOrderId_oldCommitment_value[i].quantity != 0 && purchaseOrder_purchaseOrderId_oldCommitment_value[i].subTotal != 0) then poseidon([purchaseOrder_purchaseOrderId_oldCommitment_value[i].sku, purchaseOrder_purchaseOrderId_oldCommitment_value[i].quantity, purchaseOrder_purchaseOrderId_oldCommitment_value[i].subTotal]) else 0 fi

        purchaseOrder_purchaseOrderId_oldCommitment_value_field = if innerValue != 0 then poseidon([purchaseOrder_purchaseOrderId_oldCommitment_value_field, innerValue]) else purchaseOrder_purchaseOrderId_oldCommitment_value_field fi
    
        endfor
          
        // purchaseOrder_purchaseOrderId_index_oldCommitment_commitment: preimage check


        field purchaseOrder_purchaseOrderId_oldCommitment_commitment_field = poseidon([\
          purchaseOrder_purchaseOrderId_stateVarId_field,\
          purchaseOrder_purchaseOrderId_oldCommitment_value_field,\
          purchaseOrder_purchaseOrderId_oldCommitment_owner_publicKey,\
          purchaseOrder_purchaseOrderId_oldCommitment_salt        ])


        // purchaseOrder_purchaseOrderId_index_oldCommitment_commitment: existence check


        field purchaseOrder_purchaseOrderId_commitmentRoot_check =  if purchaseOrder_purchaseOrderId_oldCommitment_owner_secretKey != 0 then checkRoot(\
          purchaseOrder_purchaseOrderId_oldCommitment_membershipWitness_siblingPath,\
          purchaseOrder_purchaseOrderId_oldCommitment_commitment_field,\
          purchaseOrder_purchaseOrderId_oldCommitment_membershipWitness_index\
        ) else commitmentRoot fi


        assert(\
          field_to_bool_256(commitmentRoot)[8..256] == field_to_bool_256(purchaseOrder_purchaseOrderId_commitmentRoot_check)[8..256]\
        )


        // prepare secret state 'purchaseOrder_purchaseOrderId_index' for commitment

        field purchaseOrder_purchaseOrderId_newCommitment_value_field = poseidon([purchaseOrder_purchaseOrderId[0].sku, purchaseOrder_purchaseOrderId[0].quantity, purchaseOrder_purchaseOrderId[0].subTotal])

        for u32 i in 1..9 do
        // Create the innerValue using Poseidon hash
        field innerValue = if (purchaseOrder_purchaseOrderId[i].sku == 0 && purchaseOrder_purchaseOrderId[i].quantity == 0 && purchaseOrder_purchaseOrderId[i].subTotal == 0) then 0 else poseidon([purchaseOrder_purchaseOrderId[i].sku, purchaseOrder_purchaseOrderId[i].quantity, purchaseOrder_purchaseOrderId[i].subTotal]) fi

        purchaseOrder_purchaseOrderId_newCommitment_value_field = if innerValue != 0 then  poseidon([purchaseOrder_purchaseOrderId_newCommitment_value_field, innerValue]) else purchaseOrder_purchaseOrderId_newCommitment_value_field  fi
    
        endfor

        // purchaseOrder_purchaseOrderId_index_newCommitment_commitment - preimage check

        field purchaseOrder_purchaseOrderId_newCommitment_commitment_check_field = poseidon([\
          purchaseOrder_purchaseOrderId_stateVarId_field,\
          purchaseOrder_purchaseOrderId_newCommitment_value_field,\
          purchaseOrder_purchaseOrderId_newCommitment_owner_publicKey,\
          purchaseOrder_purchaseOrderId_newCommitment_salt\
        ])

        assert(\
          field_to_bool_256(purchaseOrder_purchaseOrderId_newCommitment_commitment)[8..256] == field_to_bool_256(purchaseOrder_purchaseOrderId_newCommitment_commitment_check_field)[8..256]\
        )

         return true